<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>TestClosure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a25ef703be30c9118f7ecaa6490602fe9</Anchor>
    <Abstract>A closure that wraps a single test case. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2a2d0f24b23462f9b5e5dc59623029de</Anchor>
    <Abstract>Combine the results of two checks using a product (AND): both must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a51f854748f27060116140c8cf12cd02a</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>afab8c0737ae99cfa595261baac5387af</Anchor>
    <Abstract>Combine the results of two checks using a sum (OR): at least one must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a42121054a4fdfcde4dadca294f930adf</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Check</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a02b06a7a05a39b2a9d36066c7c1b2a96</Anchor>
    <Abstract>Check an arbitrary condition, failing the test if false. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckInt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a1718d44f68e8dca72ca3e9fc874ed856</Anchor>
    <Abstract>Check that two integers are equal, failing the test if they are not. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckFloat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a4e80ff15169ee05c6d87c2096e834d9a</Anchor>
    <Abstract>Check that two floating-point numbers are equal within some tolerance. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNonNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a6a748b83bd55765d8dc2dd705e52137e</Anchor>
    <Abstract>Check that a pointer is not equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>ab80ca5498aeecda6cd1f7cb92a8f6018</Anchor>
    <Abstract>Check that a pointer is equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a60adb41dad219d6cbf3c27bf477bd638</Anchor>
    <Abstract>Check that two strings are (approximately) equal. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fail</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a395448d7484928cd96ef99470b0d9109</Anchor>
    <Abstract>Fail the current test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>ab60215986fc07d2b182735c01cee0656</Anchor>
    <Abstract>Output a human-readable representation of a TestResult. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSharedData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a125c5e8b85f83dcab13826e5da373d54</Anchor>
    <Abstract>Map data into the address space that can be shared with other processes. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>usage</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Arguments_8cpp.html</Path>
    <Anchor>af23d8c13133fbc8715f459529590ed12</Anchor>
    <Abstract>Usage strings for command-line arguments. </Abstract>
    <DeclaredIn>Arguments.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2a2d0f24b23462f9b5e5dc59623029de</Anchor>
    <Abstract>Combine the results of two checks using a product (AND): both must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a51f854748f27060116140c8cf12cd02a</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>afab8c0737ae99cfa595261baac5387af</Anchor>
    <Abstract>Combine the results of two checks using a sum (OR): at least one must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a42121054a4fdfcde4dadca294f930adf</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Check</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a02b06a7a05a39b2a9d36066c7c1b2a96</Anchor>
    <Abstract>Check an arbitrary condition, failing the test if false. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckInt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a1718d44f68e8dca72ca3e9fc874ed856</Anchor>
    <Abstract>Check that two integers are equal, failing the test if they are not. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNonNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a6a748b83bd55765d8dc2dd705e52137e</Anchor>
    <Abstract>Check that a pointer is not equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>ab80ca5498aeecda6cd1f7cb92a8f6018</Anchor>
    <Abstract>Check that a pointer is equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckFloat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a4e80ff15169ee05c6d87c2096e834d9a</Anchor>
    <Abstract>Check that two floating-point numbers are equal within some tolerance. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a60adb41dad219d6cbf3c27bf477bd638</Anchor>
    <Abstract>Check that two strings are (approximately) equal. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fail</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a395448d7484928cd96ef99470b0d9109</Anchor>
    <Abstract>Fail the current test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterSandbox</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>aed77613e7ee73c012e02edbcbcb9ec7d</Anchor>
    <Abstract>Enter unprivileged testing sandbox, if supported. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForkTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a33c566b4173ebd55bf3df8db7c018a90</Anchor>
    <Abstract>Run a test in another process. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RunInProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a9cdfc5dd1e8d1d603833c8a9def1af77</Anchor>
    <Abstract>Run a test in the current process, catching all exceptions. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Abstract>Container for all libgrading names. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TestClosure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a25ef703be30c9118f7ecaa6490602fe9</Anchor>
    <Abstract>A closure that wraps a single test case. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2a2d0f24b23462f9b5e5dc59623029de</Anchor>
    <Abstract>Combine the results of two checks using a product (AND): both must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&amp;&amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a51f854748f27060116140c8cf12cd02a</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>afab8c0737ae99cfa595261baac5387af</Anchor>
    <Abstract>Combine the results of two checks using a sum (OR): at least one must pass. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator||</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a42121054a4fdfcde4dadca294f930adf</Anchor>
    <Abstract>L-value version of above. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Check</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a02b06a7a05a39b2a9d36066c7c1b2a96</Anchor>
    <Abstract>Check an arbitrary condition, failing the test if false. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckInt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a1718d44f68e8dca72ca3e9fc874ed856</Anchor>
    <Abstract>Check that two integers are equal, failing the test if they are not. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckFloat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a4e80ff15169ee05c6d87c2096e834d9a</Anchor>
    <Abstract>Check that two floating-point numbers are equal within some tolerance. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNonNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a6a748b83bd55765d8dc2dd705e52137e</Anchor>
    <Abstract>Check that a pointer is not equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>ab80ca5498aeecda6cd1f7cb92a8f6018</Anchor>
    <Abstract>Check that a pointer is equal to nullptr. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a60adb41dad219d6cbf3c27bf477bd638</Anchor>
    <Abstract>Check that two strings are (approximately) equal. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fail</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a395448d7484928cd96ef99470b0d9109</Anchor>
    <Abstract>Fail the current test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>ab60215986fc07d2b182735c01cee0656</Anchor>
    <Abstract>Output a human-readable representation of a TestResult. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSharedData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a125c5e8b85f83dcab13826e5da373d54</Anchor>
    <Abstract>Map data into the address space that can be shared with other processes. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnterSandbox</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>aed77613e7ee73c012e02edbcbcb9ec7d</Anchor>
    <Abstract>Enter unprivileged testing sandbox, if supported. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForkTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a33c566b4173ebd55bf3df8db7c018a90</Anchor>
    <Abstract>Run a test in another process. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RunInProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a9cdfc5dd1e8d1d603833c8a9def1af77</Anchor>
    <Abstract>Run a test in the current process, catching all exceptions. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Pass</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642ab9b57aae83585e17ede4570dcede353c</Anchor>
    <Abstract>the test succeeded </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fail</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642aceaa0734f0b3c738120c67344d8f3ec1</Anchor>
    <Abstract>the test failed </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Abort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642a727b63583e01fa2b3952dab580c84dc2</Anchor>
    <Abstract>the test was aborted (e.g., assert() fired) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Segfault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642a6dec3eff895251a583a6983d621296b4</Anchor>
    <Abstract>the test caused a segmentation fault </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642ac85a251cc457840f1e032f1b733e9398</Anchor>
    <Abstract>the test took too long to run </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UncaughtException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642a0e027d34871285a5efcb61de6f31bd8d</Anchor>
    <Abstract>the test threw an exception </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OtherError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a2fb7aadc16fed93221d13a7ec3c50642a611572ba77cbd55463aeb65f1f77a052</Anchor>
    <Abstract>the test terminated for another reason </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Inline</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a003d17e26c05ff16d0abb469ca779677a0125cf5f3ca38b312ca5d3b511c45a13</Anchor>
    <Abstract>In the same process, in the current call stack. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Separated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a003d17e26c05ff16d0abb469ca779677a606970f24025625f40867ff6d152fa1e</Anchor>
    <Abstract>In separate but unsandboxed processes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Sandboxed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>grading</Scope>
    </TokenIdentifier>
    <Path>namespacegrading.html</Path>
    <Anchor>a003d17e26c05ff16d0abb469ca779677a7b8a250802343eae5e2d3b3fd34aea64</Anchor>
    <Abstract>In a separate, sandboxed process (if supported). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::Arguments</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Abstract>Parsed command-line arguments. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Parse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>a7732fee01761ae341c2a811613637372</Anchor>
    <Abstract>Parse command-line arguments. </Abstract>
    <DeclaredIn>private.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>af27b2dcc5f0d6408269307739fa43ec3</Anchor>
    <Abstract>There was an error parsing command-line arguments. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>help</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>a49fc425ab3b72f3f60b751193b5cff29</Anchor>
    <Abstract>The --help argument was given. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>verbose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>a087685f54898c5180dd954bfc1e5fb1f</Anchor>
    <Abstract>The --verbose argument was given. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>runStrategy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>a6bd6ba5bd95b7f4671a0544a81f4948a</Anchor>
    <Abstract>The TestRunStrategy chosen by the user (e.g., inline). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::Arguments</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1Arguments.html</Path>
    <Anchor>a07fb086b85679ba3a1b6f40edec2f4e8</Anchor>
    <Abstract>Maximum length of time to wait for any test. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::CheckResult</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Abstract>The result of executing a CheckSomething() function. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckResult</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>aa40a4ffbd2ed79d36078a96dab3e2197</Anchor>
    <Abstract>&quot;All&amp;#39;s-well&quot; constructor (i.e., the check passed). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckResult</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>ac4887f6895b7acdf8054786005c04c74</Anchor>
    <Abstract>Constructor that takes a simple error message. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckResult</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a8a31267ec76a136a38bc5e2d6e4896a6</Anchor>
    <Abstract>Constructor that takes an expected and actual value. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CheckResult</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a5e039b8eb3b849830cdfd2cfa67b4d6f</Anchor>
    <Abstract>Move constructor. Steal error result from a temporary CheckResult. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a330241cd86ab1a0bc868b4aa557b57ba</Anchor>
    <Abstract>Add further error details to this result, should it be a failure. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a2c07da561db6b1b45860607791b9ba97</Anchor>
    <Abstract>Add further error details to this result, should it be a failure. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a38cc0cf6cb8c20b57ae92558f887569e</Anchor>
    <Abstract>Whether or not the check result is erroneous. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cancel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a02d5fa6b14e221f3012a794b905be166</Anchor>
    <Abstract>Cancel the error: the result is actually ok (e.g., because of a logical OR) or else the error&amp;#39;s owner...</Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>actual</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a872287484e02407a364d921d96496825</Anchor>
    <Abstract>Value test expected to see (user-readable representation). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>expected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>ae92e3e1afc39f288b59466e7da8614d7</Anchor>
    <Abstract>Actual value that was seen (user-readable representation). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>message</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::CheckResult</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1CheckResult.html</Path>
    <Anchor>a5679ca29245899bbe1dc3ccd6afe7222</Anchor>
    <Abstract>A message to display if the check fails. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::SharedMemory</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::SharedMemory</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1SharedMemory.html</Path>
    <Abstract>A representation of a shared memory object. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rawPointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::SharedMemory</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1SharedMemory.html</Path>
    <Anchor>a9e179bfc0c2500deb211fa3dadea4c9b</Anchor>
    <Abstract>A pointer to the shared memory, which will be invalidated after this object is destructed. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::Test</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Abstract>A single, completely-initialized test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TagSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a191b633593a0e8e5e09820dc775889f0</Anchor>
    <Abstract>A set of arbitrary tags that can be used when selecting tests. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Test</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>acf51f543bdde8ba3fa198cc8a8c26f7a</Anchor>
    <Abstract>Standard constructor. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Test</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a4ecb5be84917e6e2dd006d62adf2e8ec</Anchor>
    <Abstract>Function-plus-expectation constructor. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Test</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a180a2a6e9c1656fd1ea37ec3e70bbb9c</Anchor>
    <Abstract>Function-pointer constructor. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>name</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a37627d5d5bba7f4a8690c71c2ab3cb07</Anchor>
    <Abstract>User-meaningful test name (ideally a single line or less). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a7b5000e45c1386c4e56ef650f6b0ef5b</Anchor>
    <Abstract>A longer test description. May contain newlines. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>a07d528eee9de2abf3d9937a71ed6f3bd</Anchor>
    <Abstract>Maximum length of time this test should take (or 0 for unlimited). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>weight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>adeb71e361e179403c3cacbccd6e8c1bd</Anchor>
    <Abstract>How much weight to place on this test when calculating final score. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Run</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::Test</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1Test.html</Path>
    <Anchor>ac9a3c81c2bd6eec42a015fbef89e0822</Anchor>
    <Abstract>Run this test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::TestBuilder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Abstract>An object used to construct a complete Test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TestBuilder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Anchor>af3eb6a41d8afea7a4664c913ec89bbba</Anchor>
    <Abstract>Construct a builder for a named test within a TestSuite. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>description</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Anchor>a5080f04be569ca7427de494ffbb751df</Anchor>
    <Abstract>Set description (which will be printed when run in verbose mode). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>desc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Anchor>a69eeccd5df6790033221e369bd40366f</Anchor>
    <Abstract>Set description (which will be printed when run in verbose mode). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Anchor>a46538f6cf91c6c0347baa6a6fc2c72fb</Anchor>
    <Abstract>Set the test timeout (0 means &quot;run forever&quot;). </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>weight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestBuilder</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestBuilder.html</Path>
    <Anchor>afaaa8e7cc9878a5e3200c534df5411e1</Anchor>
    <Abstract>Set the weight accorded to a test. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::TestSuite</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Abstract>A collection of tests that we can run. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TestSuite</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>abc8126fceba23a7a21730d962f483f11</Anchor>
    <Abstract>Default constructor: create an empty test suite. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TestSuite</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>a0bed231a3b0ba8cb3430026c3d9d22c2</Anchor>
    <Abstract>Construct a TestSuite from a brace-enclosed list of Test objects. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>a2b0eee0d73ca97bab412df536ba785e5</Anchor>
    <Abstract>Start creating a test with a given name. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>a575b575bb13b2027e9bb19c8ded6c40a</Anchor>
    <Abstract>Add an already-complete Test to this suite. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>totalWeight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>afde9b65cb6534abec8680936047a03aa</Anchor>
    <Abstract>The total weight of all tests in the suite. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Run</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>grading::TestSuite</Scope>
    </TokenIdentifier>
    <Path>classgrading_1_1TestSuite.html</Path>
    <Anchor>a5bccd76db8e344d679d220c2fe002278</Anchor>
    <Abstract>Run all tests, using command-line arguments to guide the testing strategy, timeouts, etc. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>grading::TestSuite::Statistics</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>grading::TestSuite::Statistics</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1TestSuite_1_1Statistics.html</Path>
    <Abstract>Summary statistics about the execution of a TestSuite. </Abstract>
    <DeclaredIn>libgrading.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>passed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::TestSuite::Statistics</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1TestSuite_1_1Statistics.html</Path>
    <Anchor>a1810ba190aa195caf7bb8dcc23bb1c7d</Anchor>
    <Abstract>tests that passed (unweighted) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>failed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::TestSuite::Statistics</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1TestSuite_1_1Statistics.html</Path>
    <Anchor>ac22f1c4471429c9a1f0c09efd5fcca3a</Anchor>
    <Abstract>tests that failed (unweighted) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>score</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::TestSuite::Statistics</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1TestSuite_1_1Statistics.html</Path>
    <Anchor>a8c5cd9b525ee73a24b1d9d8e34982d1c</Anchor>
    <Abstract>weighted (passed/total) score </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>total</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>grading::TestSuite::Statistics</Scope>
    </TokenIdentifier>
    <Path>structgrading_1_1TestSuite_1_1Statistics.html</Path>
    <Anchor>af9031f7978e957b9979e78873830ce46</Anchor>
    <Abstract>total test count (unweighted) </Abstract>
  </Token>
</Tokens>
